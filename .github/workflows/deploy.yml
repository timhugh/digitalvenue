name: Deploy Digital Venue Server

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_variables.outputs.environment }}
      app_version: ${{ steps.set_variables.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set environment name from branch
        id: set_variables
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME=${{ github.head_ref }}
          else
            BRANCH_NAME=${{ github.ref_name }}
          fi

          if [ "$BRANCH_NAME" == "main" ]; then
            ENVIRONMENT=prod
          else
            ENVIRONMENT=${BRANCH_NAME}
          fi
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT

          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "app_version=${COMMIT_HASH}" >> $GITHUB_OUTPUT

  setup_droplet:
    runs-on: ubuntu-latest
    needs: setup_environment
    env:
      ENVIRONMENT: ${{ needs.setup_environment.outputs.environment }}
      APP_VERSION: ${{ needs.setup_environment.outputs.app_version }}
      DROPLET_TAG: "env:${{ needs.setup_environment.outputs.environment }}"
    outputs:
      droplet_ip: ${{ steps.get_droplet_ip.outputs.droplet_ip }}
    steps:
      - uses: actions/checkout@v4

      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Check for existing droplet
        run: |
          DROPLET_IP=$(doctl compute droplet list --tag-name ${{ env.DROPLET_TAG }} --format PublicIPv4 --no-header)
          if [ -n "$DROPLET_IP" ]; then
            echo "Found existing droplet with tag ${{ env.DROPLET_TAG }} and IP address ${DROPLET_IP}"
            echo "EXISTING_DROPLET=true" >> $GITHUB_ENV
            echo "EXISTING_DROPLET_IP=${DROPLET_IP}" >> $GITHUB_ENV
          else
            echo "No existing droplet found with tag ${{ env.DROPLET_TAG }}"
            echo "EXISTING_DROPLET=false" >> $GITHUB_ENV
          fi

      - name: Create new droplet
        if: ${{ env.EXISTING_DROPLET == 'false' }}
        run: |
          doctl compute droplet create "digital-venue-${{ env.ENVIRONMENT }}" \
            --image ubuntu-24-04-x64 \
            --size s-1vcpu-512mb-10gb \
            --region sfo3 \
            --tag-names digital-venue,${{ env.DROPLET_TAG }} \
            --ssh-keys ${{ secrets.DIGITALOCEAN_SSH_KEY_FINGERPRINT }} \
            --wait

          DROPLET_IP=$(doctl compute droplet list --tag-name ${{ env.DROPLET_TAG }} --format PublicIPv4 --no-header)
          if [ -n "$DROPLET_IP" ]; then
            echo "NEW_DROPLET_IP=${DROPLET_IP}" >> $GITHUB_ENV
          else
            echo "Failed to find new droplet with tag ${{ env.DROPLET_TAG }} after creation"
            exit 1
          fi

      - name: Get final droplet IP
        id: get_droplet_ip
        run: |
          if [ "${{ env.EXISTING_DROPLET }}" == "true" ]; then
            echo "DROPLET_IP=${{ env.EXISTING_DROPLET_IP }}" >> $GITHUB_ENV
            echo "droplet_ip=${{ env.EXISTING_DROPLET_IP }}" >> $GITHUB_OUTPUT
          else
            echo "DROPLET_IP=${{ env.NEW_DROPLET_IP }}" >> $GITHUB_ENV
            echo "droplet_ip=${{ env.NEW_DROPLET_IP }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup SSH key for droplet
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Wait for droplet to be ready
        run: |
          while ! ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@${{ env.DROPLET_IP }} 'echo "ready"'; do
            sleep 5
          done

      - name: Copy scripts to droplet
        if: ${{ env.EXISTING_DROPLET == 'false' }}
        run: |
          scp -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            deploy/* \
            root@${{ env.DROPLET_IP }}:/opt/

      - name: Execute provisioning script on droplet
        if: ${{ env.EXISTING_DROPLET == 'false' }}
        run: |
          ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            root@${{ env.DROPLET_IP }} 'bash /opt/provision.sh'

  deploy:
    runs-on: ubuntu-latest
    needs: [setup_environment, setup_droplet]
    env:
      APP_VERSION: ${{ needs.setup_environment.outputs.app_version }}
      DROPLET_IP: ${{ needs.setup_droplet.outputs.droplet_ip }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - run: ./gradlew build

      - name: Setup SSH key for droplet
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy server package to droplet
        run: |
          scp -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            server/build/distributions/*.zip \
            root@${{ env.DROPLET_IP }}:/opt/dvserver/versions/${{ env.APP_VERSION }}.zip

      - name: Trigger droplet deployment script
        run: |
          ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            root@${{ env.DROPLET_IP }} "bash /opt/deploy.sh ${{ env.APP_VERSION }}"
