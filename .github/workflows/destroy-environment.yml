name: Destroy environment

env:
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-west-2
  ROUTE_53_HOSTED_ZONE_ID: ${{ secrets.ROUTE_53_HOSTED_ZONE_ID }}

on:
  pull_request:
    types: [closed]
  workflow_dispatch:

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_variables.outputs.environment }}
      app_version: ${{ steps.set_variables.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set environment name from branch
        id: set_variables
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME=${{ github.head_ref }}
          else
            BRANCH_NAME=${{ github.ref_name }}
          fi

          if [ "$BRANCH_NAME" == "main" ]; then
            echo "Blocked attempt to destroy production environment; investigate why that happened"
            exit 1
          else
            ENVIRONMENT=${BRANCH_NAME}
          fi
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT

  destroy_droplet:
    runs-on: ubuntu-latest
    needs: setup_environment
    env:
      ENVIRONMENT: ${{ needs.setup_environment.outputs.environment }}
      APP_VERSION: ${{ needs.setup_environment.outputs.app_version }}
      DROPLET_TAG: "env:${{ needs.setup_environment.outputs.environment }}"
    steps:
      - uses: actions/checkout@v4

      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DIGITALOCEAN_TOKEN }}

      - name: Destroy droplet
        run: |
          DROPLET_ID=$(doctl compute droplet list --tag-name ${{ env.DROPLET_TAG }} --format ID --no-header)
          if [ -n "$DROPLET_ID" ]; then
            doctl compute droplet delete $DROPLET_ID --force
          else
            echo "No existing droplet found with tag ${{ env.DROPLET_TAG }}"
          fi

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Destroy route53 records for environment
        run: |
          DOMAIN="${{ env.ENVIRONMENT }}.digital-venue.net"

          # Check if record exists before attempting to delete
          if aws route53 list-resource-record-sets --hosted-zone-id ${{ env.ROUTE_53_HOSTED_ZONE_ID }} --query "ResourceRecordSets[?Name=='$DOMAIN.']" --output text | grep -q "$DOMAIN"; then
            echo "Deleting DNS record for $DOMAIN"

            aws route53 change-resource-record-sets \
              --hosted-zone-id ${{ env.ROUTE_53_HOSTED_ZONE_ID }} \
              --change-batch '{
                "Changes": [
                  {
                    "Action": "DELETE",
                    "ResourceRecordSet": {
                      "Name": "'"$DOMAIN"'",
                      "Type": "A",
                      "TTL": 300,
                      "ResourceRecords": []
                    }
                  }
                ]
              }'
          else
            echo "No DNS record found for $DOMAIN"
          fi
